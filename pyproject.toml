[project]
name = "python-chat"
version = "0.1.0"
description = ""
readme = "README.md"
requires-python = ">=3.11, <4"
dependencies = [
    "python-engineio (>=4.9.1)",
    "python-socketio (>=5.11.4)",
    "simple-websocket (>=1.0.0)",
    "werkzeug (>=3.0.4)",
    "wsproto (>=1.2.0)",
    "flask-sqlalchemy (>=3.1.0)",
    "flask-login (>=0.6.3)",
    "psycopg2-binary (>=2.9.9)",
    "flask-wtf (>=1.2.1)",
    "bidict (>=0.23.1)",
    "blinker (>=1.8.2)",
    "click (>=8.1.7)",
    "colorama (>=0.4.6)",
    "dnspython (>=2.6.1)",
    "eventlet (>=0.37.0)",
    "flask (>=3.0.3)",
    "flask-socketio (>=5.3.7)",
    "greenlet (>=3.1.0)",
    "gunicorn (>=23.0.0)",
    "h11 (>=0.15.0)",
    "itsdangerous (>=2.2.0)",
    "jinja2 (>=3.1.4)",
    "markupsafe (>=2.1.5)",
    "packaging (>=24.1)",
    "pydantic (>=2.0.0)",
    "pydantic-core (>=2.0.0)",
    "mypy (>=1.15.0,<2.0.0)",
    "testcontainers (>=4.10.0,<5.0.0)",
    "ruff (>=0.11.6,<0.12.0)",
    "pre-commit (>=4.2.0,<5.0.0)",
]

[tool.poetry]
package-mode = false


[tool.poetry.group.dev.dependencies]
pytest-cov = "^6.1.1"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
plugins = "pydantic.mypy"
exclude = ["postgres-data", "tests"]
warn_return_any = true
warn_unused_configs = true
follow_untyped_imports = true
ignore_missing_imports = true
warn_unreachable = true

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "./postgres-data",
]

line-length = 200
indent-width = 4
target-version = "py313"

[tool.ruff.lint]
# E - pycodestyle F - Pyflakes UP - pyupgrade B - flake8-bugbear SIM - flake8-simplify I - isort
# N - flake8-annotations A - flake8-annotations T20 - flake8-tidy-imports ERA - flake8-eradicate
# C4 - flake8-comprehensions TID - flake8-tidy-imports PERF - flake8-perf
select = [
    "E",
    "F",
    "UP",
    "B",
    "SIM",
    "I",
    "N",
    "A",
    "T20",
    "ERA",
    "C4",
    "TID",
    "PERF",
]
ignore = ["SIM108", "E712"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Ignore E501 (line too long) in tests.
"tests/*" = ["E501"]

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.pytest.ini_options]
pythonpath = "src"
addopts = ["--import-mode=importlib", "-v"]
testpaths = ["src/tests"]
norecursedirs = [
    "postgres-data",
    ".git",
    ".venv",
    "__pycache__",
    "static",
    "templates",
    "logs",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/db_init.py",
    "*/postgres-data/*",
    "*/tests/conftest.py",
    "*/migrations/*",
    "*/settings/*",
    "*/__pycache__/*",
    "*/.env/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@overload",
    "except ImportError",
    "\\.\\.\\.",
    "raise NotImplementedError()",
    "def __repr__",
    "if __name__ == .__main__.:",
]
